#!/usr/bin/env python3
import os, sys, hashlib
from subprocess import call
import getpass
import stat

if len(sys.argv) < 2 or len(sys.argv) > 3:
    print("Usage: lms-deploy <source-dir> <deploy-target>")
    sys.exit(1)

source_dir = os.path.abspath(sys.argv[1])
digest = hashlib.sha1(str.encode(source_dir)).hexdigest()
binary_dir = os.path.join(os.path.expanduser("~"), ".lms", getpass.getuser()
    + "." + os.path.basename(source_dir) + "." + digest[0:6])

try:
    os.makedirs(binary_dir)
except OSError as e:
    pass # ignore errors here

os.chdir(binary_dir)
os.environ["CC"] = "/usr/bin/arm-linux-gnueabihf-gcc"
os.environ["CXX"] = "/usr/bin/arm-linux-gnueabihf-g++"

ret = call(["cmake", source_dir, "-DCMAKE_BUILD_TYPE=RelWithDebInfo",
    "-DEXCLUDES=ogre_binding ogre_window_manager image_renderer ogre_input"])
if ret != 0:
    print("CMake failed")
    sys.exit(1)

ret = call(["make", "-j4"])
if ret != 0:
    print("Make failed")
    sys.exit(1)

call(["cp", "-R", os.path.join(source_dir, "configs"), binary_dir])

RUN_SCRIPT = """#/bin/bash
basedir=$(dirname $0)
export LD_LIBRARY_PATH=${basedir}:${basedir}/external/libraries:${basedir}/external/services
export LMS_MODULE_PATH=${basedir}/external/modules
export LMS_SERVICE_PATH=${basedir}/external/services
export LMS_CONFIG_PATH=${basedir}/configs
${basedir}/lms "$@"
"""

run_file = os.path.join(binary_dir, "run")
with open(run_file, "w") as f:
    f.write(RUN_SCRIPT)
st = os.stat(run_file)
os.chmod(run_file, st.st_mode | stat.S_IEXEC)

if len(sys.argv) == 3:
    deploy_target = sys.argv[2]

    ret = call(["rsync", "-r", "-v", "-u", "--exclude=CMakeFiles",
        "--exclude=*.cmake", "--exclude=Makefile", binary_dir, deploy_target + ":~/"])
    if ret != 0:
        print("rsync failed")
        sys.exit(1)
